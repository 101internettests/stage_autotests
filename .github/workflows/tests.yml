name: 4 tests

on:
  schedule:
    - cron: "12 3 * * *"
  workflow_dispatch:

env:
  BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
  CHAT_ID: ${{ secrets.CHAT_ID }}
  HEADLESS: ${{ secrets.HEADLESS }}
  TOKEN: ${{ secrets.TOKEN }}
  URL_STAGE: ${{ secrets.URL_STAGE }}

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    name: Run autotests
    steps:
      - name: Download repository
        uses: actions/checkout@v4
      - name: Set up Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: install dependencies
        run: pip install -r requirements.txt

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4.1.4

      - name: tests
        # if: "github.event.inputs.deployment_target == 'all'"
        run: pytest tests/internet  --alluredir=allure-results
        continue-on-error: true

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '17'
      - name: install Allure
        run: sudo wget https://github.com/allure-framework/allure2/releases/download/2.27.0/allure-2.27.0.tgz && sudo tar -zxvf allure-2.27.0.tgz -C /opt/ && sudo ln -s /opt/allure-2.27.0/bin/allure /usr/bin/allure
      - name: Generate report
        run: allure generate -c allure-results -o _site
      - name: Save report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: _site
          path: _site
          retention-days: 1

  publish-report:
    name: Report publication
    runs-on: ubuntu-latest
    needs: run-tests
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  download-history:
    runs-on: ubuntu-latest
    name: Download history
    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Download artifacts
        run: |
          ARTIFACT_ID=$(curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts?name=_site" | jq -r '.artifacts[0].id')
          curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts/$ARTIFACT_ID/zip" -o artifacts.zip
          REPORT_ID=$(curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts?name=github-pages" | jq -r '.artifacts[0].id')
          curl -sL -H "Accept: application/vnd.github.v3+json" -H "Authorization: Bearer ${{ secrets.TOKEN }}" "https://api.github.com/repos/101internettests/qase_autotests/actions/artifacts/$REPORT_ID/zip" -o pages.zip
      - name: Unzip artifacts
        run: |
          mkdir -p allure-results
          unzip -q artifacts.zip -d allure-results
          mkdir -p old_pages pages_history
          unzip -q pages.zip -d old_pages
          tar -xf old_pages/artifact.tar -C pages_history
      - name: Copy history to Allure results
        run: |
          cp -r pages_history/history/* allure-results
          cp -r pages_history/history/ allure-results
      - name: Store Allure history
        uses: actions/upload-artifact@v4
        with:
          name: allure-results
          path: allure-results
          retention-days: 2